{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sl240\slmult1\ul\b\f0\fs28\lang9 4.1 Introduction\par
\fs22 Meet the box model\ulnone\b0\par
The box model is how web browsers see individual HTML elements. Each element is comprised of 4 areas: the element, the padding, the border and the margin.\par
\par
We discussed how to adjust the white space in these areas in Module 2.5, but in this module we will be discussing these areas as a method to position elements on a page.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b element\b0  - This is always contained within a square, even if it is a text block with jagged edges or a transparent image that isn't rectangular. Web browsers will impose a rectangle around the smallest area the HTML's content actually occupies. Until now we've allowed the Web browser to determine the size of the element based solely on the content, but later in this section we'll learn how to adjust this sizing.\par
{\pntext\f1\'B7\tab}\b padding\b0  - This is the white space just outside the element's content. We can set each of the four sides independently, and we can set the value to 0. If we set the element's background color, that colour will apply to the padding as well.\par
{\pntext\f1\'B7\tab}\b border\b0  - This is the area just outside the padding. Most HTML element's border default width is 0 and thus invisible. We can set each of the four sides independently. We can set a color, a pattern, even an image. This is a great way to add horizontal or vertical lines to an element on our page.\par
{\pntext\f1\'B7\tab}\b margin\b0  - This is the space surrounding an element, outside the border. Margins are the part of HTML elements that interact with one another. When two margins interact the larger of the two wins meaning the smaller margin "collapses", thus the actual space between two elements is the larger of the two, not the sum of the margins.\par

\pard\sl240\slmult1\par
If we need more information, we can consult the box model definition in the W3C's CSS2.1 specification at: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/TR/CSS2/box.html }}{\fldrslt{https://www.w3.org/TR/CSS2/box.html\ul0\cf0}}}}\f0\fs22\par
\par
\ul\b\fs28 4.2 - The Basics of layout\ulnone\b0\par
\ul\b\fs22 The alignment property\ulnone\b0\par
One of the simplest ways to align content is to use the direct text-align property. This can help us set the alignment of text or inline content within the context of their containing HTML element.\par
\par
\b text-align\b0\par
If we hace used a text editor before, like Microsoft Word, we've probably used the different text-align properties.: left (default for English), right, center and justify. Text-align in CSS works the same way. Left, center and right specify how the lines of text within the text block are arranged. Justify sets the left and right edges of the text flush with the container's edges, which stretches the white space between words so that the overall block fits in a perfect rectangle.\par
\par
We should note that this property can only apply to block elements like paragraphs, divs and headers.\par
\par
\b line-height\b0\par
We may have noticed that the text-align property sets the content's alignment horizontally, but it leaves its vertical alignment unchanged. Text lives within a specified vertical space, in which the text is drawn by default in the middle of that vertical space. If we change the height of the containing HTML block, the text will remain at the top of the block. However, if we use the "line-height" property instead, then the block will grow and the text will vertically center within it.\par
\par
\b International considerations\b0\par
Please do not use text-align indiscriminately. If there's a possibility that our site will need to be translated into a language that uses the Arabic, Hebrew, or Thaana scripts (which read from right to left), it creates difficulties to have to change all the right values to left and vice versa.\par
\par
Most, but not yet all, major browsers support the values start and end. The start value aligns text with the side of the line where we start reading, whether that's on the left for English or the right for Urdu. They also make more sense for use with vertical text, such as Japanese and Mongolian. Once these values are widely supported by browsers, they will often be a better choice than right and left, since there's no need to change the values for pages as the langauge changes.\par
\line Also, note that CSS will in the future provide better support for justification in languages where words are not separated by spaces, such as Chinese and Thai, or languages where words are separated by special marks, such as in Amharic. For more information about different approaches to justification, we should see the following article: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/International/articles/typography/justification }}{\fldrslt{https://www.w3.org/International/articles/typography/justification\ul0\cf0}}}}\f0\fs22\par
\par
\ul\b Element width and height\ulnone\b0\par
Until now we've let the browser decide how big the element is, but we can actually adjust its width and height manually.\par
\par
\b Width and height\b0\par
We can use pixel values for both width and height, but we'll most often want to use percentages to set these so that our elements grow and shrink as appropriate based on the screen size.\par
\par
For example, if we set the width of a paragraph to 30% as we resize the browser window, we'll see how that element dynamically resizes. That's because when we use percentages, the size is computed based on the element's "containing block", or the element that contains the one we're styling. If our element is just within the body tag, the width is computed based on the relationship with the screen width.\par
\par
Things are a bit more complicated with using a percentage to set an element's height. This is because typically the body's height is not specified, so if we use a percentage the size won't adjust.\par
\par
\b min-width, max-width, min-height, max-height\b0\par
Setting width and height with percentages will save us work because our design will automatically optimize for the user's screen size. However, some elements can't grow and shrink as dynamically as text can.\par
\par
For example, images will get "pixelated" if we let them grow too large, and they can look really distorted. Thankfully, we can set max and min width and heights. This way, we can set a range for our image to grow and shrink where we know it will still look good.\par
\par
When we view the example on the page, the paragraphs will dynamically resize based on the size of our window.  Here, we can see that the elements have resized accordingly, but have hit limits of their min and max constraints. This is why using percentages for width and height are so important, it helps us write code that works for all screen sizes.\par
\par
\ul\b Positioning with padding and margin\ulnone\b0\par
Whenever possible, it is ideal to position our elements by adjusting their padding and margins. Sometimes this isn't enough to get the element exactly where we'd like it ot be, so we'll learn more tools later in this module. Regardless, we'll almost always want some padding and margin around our element so it's best to adjust these before progressing onto more complicated positioning methods.\par
\par
Once we've set the width for our element, then we can set margins as a way to position our element relative to others. One of the most commonly used margin settings is "auto". That is because if we set an element's left and right margin to auto it will be dynamically centered within its containing block.\par
\par
However, we should note that this only works for block HTML elements like paragraphs, divs and headers. If we want to use this to position an inline element, such as img or a, we will need to tell CSS to treat them as block elements by setting display: block;\par
\par
\b External Resources\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 A W3C CSS tip: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/Style/Examples/007/center }}{\fldrslt{https://www.w3.org/Style/Examples/007/center\ul0\cf0}}}}\f0\fs22  , on different ways to center our content\par
{\pntext\f1\'B7\tab}A "CSS Tricks" article on collapsing margins {{\field{\*\fldinst{HYPERLINK https://css-tricks.com/what-you-should-know-about-collapsing-margins/ }}{\fldrslt{https://css-tricks.com/what-you-should-know-about-collapsing-margins/\ul0\cf0}}}}\f0\fs22\par

\pard\sl240\slmult1\par
\ul\b Activity 4.2 - Practice with alignment\ulnone\b0\par
For this activity we are going to practice some of the basic alignment properties we've learned in this unit.\par
\par
As it is, the given HTML and CSS codes produce a web page where everything takes the whole width of the screen without much spacing and appropriate alignment. Our goal is to add properties to the existing CSS rules so that the final page looks like the picture displayed.\par
\par
To do this we will need to:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 remove the margin at the very edges of the page so the header and footer touch the edges of the page\par
{\pntext\f1\'B7\tab}limit the size of h1 title to 50% of the page's width, with horizontally centered text and vertically centered text within a height of 75px\par
{\pntext\f1\'B7\tab}stretch the height of the header p to 50px, but let the text remain top aligned\par
{\pntext\f1\'B7\tab}limit the width of the section to 75% of the page but never less than 500px. The section should be centered within the window\par
{\pntext\f1\'B7\tab}limit the width of the h2 to 30% of the section, centered within that container. It should have a padding of 30px all around it.\par
{\pntext\f1\'B7\tab}limit the width of each article to 40% of the width of the section, with justified text. Each should have a margin of 50px all around it, a top padding of 10px, a left and right padding of 15px and a bottom padding of 30px. The h3 within each article should be aligned to the right\par
{\pntext\f1\'B7\tab}give the #leftP article a margin of 10% of the section\par
{\pntext\f1\'B7\tab}give the #rightP article a left margin of 50% of the section\par
{\pntext\f1\'B7\tab}limit the footer height to 10% of the page, but no more than 50px and no less than 10px. It should have a padding of 10px and a margin between it and the section of 30px\par
}
 