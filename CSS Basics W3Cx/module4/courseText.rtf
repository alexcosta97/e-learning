{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sl240\slmult1\ul\b\f0\fs28\lang9 4.1 Introduction\par
\fs22 Meet the box model\ulnone\b0\par
The box model is how web browsers see individual HTML elements. Each element is comprised of 4 areas: the element, the padding, the border and the margin.\par
\par
We discussed how to adjust the white space in these areas in Module 2.5, but in this module we will be discussing these areas as a method to position elements on a page.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b element\b0  - This is always contained within a square, even if it is a text block with jagged edges or a transparent image that isn't rectangular. Web browsers will impose a rectangle around the smallest area the HTML's content actually occupies. Until now we've allowed the Web browser to determine the size of the element based solely on the content, but later in this section we'll learn how to adjust this sizing.\par
{\pntext\f1\'B7\tab}\b padding\b0  - This is the white space just outside the element's content. We can set each of the four sides independently, and we can set the value to 0. If we set the element's background color, that colour will apply to the padding as well.\par
{\pntext\f1\'B7\tab}\b border\b0  - This is the area just outside the padding. Most HTML element's border default width is 0 and thus invisible. We can set each of the four sides independently. We can set a color, a pattern, even an image. This is a great way to add horizontal or vertical lines to an element on our page.\par
{\pntext\f1\'B7\tab}\b margin\b0  - This is the space surrounding an element, outside the border. Margins are the part of HTML elements that interact with one another. When two margins interact the larger of the two wins meaning the smaller margin "collapses", thus the actual space between two elements is the larger of the two, not the sum of the margins.\par

\pard\sl240\slmult1\par
If we need more information, we can consult the box model definition in the W3C's CSS2.1 specification at: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/TR/CSS2/box.html }}{\fldrslt{https://www.w3.org/TR/CSS2/box.html\ul0\cf0}}}}\f0\fs22\par
\par
\ul\b\fs28 4.2 - The Basics of layout\ulnone\b0\par
\ul\b\fs22 The alignment property\ulnone\b0\par
One of the simplest ways to align content is to use the direct text-align property. This can help us set the alignment of text or inline content within the context of their containing HTML element.\par
\par
\b text-align\b0\par
If we hace used a text editor before, like Microsoft Word, we've probably used the different text-align properties.: left (default for English), right, center and justify. Text-align in CSS works the same way. Left, center and right specify how the lines of text within the text block are arranged. Justify sets the left and right edges of the text flush with the container's edges, which stretches the white space between words so that the overall block fits in a perfect rectangle.\par
\par
We should note that this property can only apply to block elements like paragraphs, divs and headers.\par
\par
\b line-height\b0\par
We may have noticed that the text-align property sets the content's alignment horizontally, but it leaves its vertical alignment unchanged. Text lives within a specified vertical space, in which the text is drawn by default in the middle of that vertical space. If we change the height of the containing HTML block, the text will remain at the top of the block. However, if we use the "line-height" property instead, then the block will grow and the text will vertically center within it.\par
\par
\b International considerations\b0\par
Please do not use text-align indiscriminately. If there's a possibility that our site will need to be translated into a language that uses the Arabic, Hebrew, or Thaana scripts (which read from right to left), it creates difficulties to have to change all the right values to left and vice versa.\par
\par
Most, but not yet all, major browsers support the values start and end. The start value aligns text with the side of the line where we start reading, whether that's on the left for English or the right for Urdu. They also make more sense for use with vertical text, such as Japanese and Mongolian. Once these values are widely supported by browsers, they will often be a better choice than right and left, since there's no need to change the values for pages as the langauge changes.\par
\line Also, note that CSS will in the future provide better support for justification in languages where words are not separated by spaces, such as Chinese and Thai, or languages where words are separated by special marks, such as in Amharic. For more information about different approaches to justification, we should see the following article: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/International/articles/typography/justification }}{\fldrslt{https://www.w3.org/International/articles/typography/justification\ul0\cf0}}}}\f0\fs22\par
\par
\ul\b Element width and height\ulnone\b0\par
Until now we've let the browser decide how big the element is, but we can actually adjust its width and height manually.\par
\par
\b Width and height\b0\par
We can use pixel values for both width and height, but we'll most often want to use percentages to set these so that our elements grow and shrink as appropriate based on the screen size.\par
\par
For example, if we set the width of a paragraph to 30% as we resize the browser window, we'll see how that element dynamically resizes. That's because when we use percentages, the size is computed based on the element's "containing block", or the element that contains the one we're styling. If our element is just within the body tag, the width is computed based on the relationship with the screen width.\par
\par
Things are a bit more complicated with using a percentage to set an element's height. This is because typically the body's height is not specified, so if we use a percentage the size won't adjust.\par
\par
\b min-width, max-width, min-height, max-height\b0\par
Setting width and height with percentages will save us work because our design will automatically optimize for the user's screen size. However, some elements can't grow and shrink as dynamically as text can.\par
\par
For example, images will get "pixelated" if we let them grow too large, and they can look really distorted. Thankfully, we can set max and min width and heights. This way, we can set a range for our image to grow and shrink where we know it will still look good.\par
\par
When we view the example on the page, the paragraphs will dynamically resize based on the size of our window.  Here, we can see that the elements have resized accordingly, but have hit limits of their min and max constraints. This is why using percentages for width and height are so important, it helps us write code that works for all screen sizes.\par
\par
\ul\b Positioning with padding and margin\ulnone\b0\par
Whenever possible, it is ideal to position our elements by adjusting their padding and margins. Sometimes this isn't enough to get the element exactly where we'd like it ot be, so we'll learn more tools later in this module. Regardless, we'll almost always want some padding and margin around our element so it's best to adjust these before progressing onto more complicated positioning methods.\par
\par
Once we've set the width for our element, then we can set margins as a way to position our element relative to others. One of the most commonly used margin settings is "auto". That is because if we set an element's left and right margin to auto it will be dynamically centered within its containing block.\par
\par
However, we should note that this only works for block HTML elements like paragraphs, divs and headers. If we want to use this to position an inline element, such as img or a, we will need to tell CSS to treat them as block elements by setting display: block;\par
\par
\b External Resources\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 A W3C CSS tip: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/Style/Examples/007/center }}{\fldrslt{https://www.w3.org/Style/Examples/007/center\ul0\cf0}}}}\f0\fs22  , on different ways to center our content\par
{\pntext\f1\'B7\tab}A "CSS Tricks" article on collapsing margins {{\field{\*\fldinst{HYPERLINK https://css-tricks.com/what-you-should-know-about-collapsing-margins/ }}{\fldrslt{https://css-tricks.com/what-you-should-know-about-collapsing-margins/\ul0\cf0}}}}\f0\fs22\par

\pard\sl240\slmult1\par
\ul\b Activity 4.2 - Practice with alignment\ulnone\b0\par
For this activity we are going to practice some of the basic alignment properties we've learned in this unit.\par
\par
As it is, the given HTML and CSS codes produce a web page where everything takes the whole width of the screen without much spacing and appropriate alignment. Our goal is to add properties to the existing CSS rules so that the final page looks like the picture displayed.\par
\par
To do this we will need to:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 remove the margin at the very edges of the page so the header and footer touch the edges of the page\par
{\pntext\f1\'B7\tab}limit the size of h1 title to 50% of the page's width, with horizontally centered text and vertically centered text within a height of 75px\par
{\pntext\f1\'B7\tab}stretch the height of the header p to 50px, but let the text remain top aligned\par
{\pntext\f1\'B7\tab}limit the width of the section to 75% of the page but never less than 500px. The section should be centered within the window\par
{\pntext\f1\'B7\tab}limit the width of the h2 to 30% of the section, centered within that container. It should have a padding of 30px all around it.\par
{\pntext\f1\'B7\tab}limit the width of each article to 40% of the width of the section, with justified text. Each should have a margin of 50px all around it, a top padding of 10px, a left and right padding of 15px and a bottom padding of 30px. The h3 within each article should be aligned to the right\par
{\pntext\f1\'B7\tab}give the #leftP article a margin of 10% of the section\par
{\pntext\f1\'B7\tab}give the #rightP article a left margin of 50% of the section\par
{\pntext\f1\'B7\tab}limit the footer height to 10% of the page, but no more than 50px and no less than 10px. It should have a padding of 10px and a margin between it and the section of 30px\par

\pard\sl240\slmult1\par
\ul\b\fs28 4.3 - Floating elements\par
\fs22 Meet the float property\ulnone\b0\par
If our elements are still not exactly where we want them to be after adjusting the padding, margins and alignment, then we can try out the float property. The "float" property is one of the most powerful tools that we can master when learning CSS.\par
\par
Up until now, we haven't moved elements very far from wherever the web browser automatically places them, but as we've probably noticed this has left our page very left side heavy. This is because, by default, elements are stacked one on top of the other, and they don't share horizontal space. With the float property, we can change this.\par
\par
The float property liberates an element from its automatic position and lifts it up to "float" on top of other elements in the direction we specify. We can specify float either right, left, or the default none.\par
Elements underneath a floating object will automatically wrap themselves around the content. For example, if we float an image, the text underneath will wrap around it so that none of it is actually obscured underneath the image, but now both text and an image can share horizontal space.\par
\par
We'll often want to set the width of a floating object so that we have tighter control over the space that object occupies. We should also remember than, by default, block HTML elements occupy the entire width of the page, even if there isn't actual content that extends that far. In that case, we'll want to set the width so that our element's size more accurately represents its content and we don't have unnecessary white space.\par
\par
\b The clear property\b0\par
Once we have some elements floating things can get a little messy. It's easy for floating objects to overlap, and to prevent this we can use the "clear" property. Uses the same parameters as float.\par
\par
\ul\b Activity 4.3 - Practice with float\ulnone\b0\par
One of the toughest parts of layouts with CSS is figuring out which elements to apply a float property to.\par
\par
As observable on the activity page, the layout is pretty messy. Our job in this activity is to decide which elements deserve a float property. We might also need to adjust some widths, margins and paddings to get everything looking like the final image on the page. We should pay close attention to the IDs applied to the HTML elements.\par
\par
\ul\b\fs28 4.4 Relative positioning\par
\fs22 Meet relative positioning\ulnone\b0\par
The "position" property sets the algorithm from how the Web browser will compute the way the HTML elements are placed on the page. There are four different value options for the position property:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b relative\b0  - This is the position setting we will be discussing in detail as it is the best way to build on the dynamic layout methods we have learned thus far. This lets us specify where an HTML element should be relative to where it would be by default.\par
{\pntext\f1\'B7\tab}\b static\b0  - This is the default setting and will place an element wherever the web browser computes it should be\par
{\pntext\f1\'B7\tab}\b fixed\b0  - This places an element in a specific location within the window. We can use this to set an element to remain where it is regardless of scrolling. This was used heavily when "frames" were popular, however it now should be used very sparingly.\par
{\pntext\f1\'B7\tab}\b absolute\b0  - This allows us to position elements relative to their containing box. This removes an element from it's normal flow (just like a floating element) so it can be difficult to control and make a layout that is truly dynamic.\par

\pard\sl240\slmult1\par
Once we've set the position to "relative" that frees us up to set the top, right, bottom and left properties - otherwise known as the "box offsets". These properties specify the distance between this object and its normal static position and the corner of the box that we are specifying.\par
\par
For example, if we set the "left" to be "30px", it will move the element 30px to the right away from the left of where it was placed by default.\par
\par
Note that position is not an inherited property so we will have to apply it individually to each element. Because of this it is best to use this approach to designing our layout sparingly and should only be used after we cannot achieve our desired layout with alignment or floating.\par
\par
\ul\b Activity 4.4 - Practice with relative positioning\ulnone\b0\par
For this activity, we are going to focus on using relative positioning to adjust how items sit on the page.\par
\par
Our task is to add CSS so that we can achieve the final layout displayed on the course page.\par
\par
We can do this with padding and margins, but we should limit ourselves to only add position, top and left properties. We should then try to resize our browser window, and if we've implemented everything correctly all the elements will stay in the same position relative to one another.\par
\par
\ul\b\fs28 4.5 - Style studies\par
\fs22 Menus\ulnone\b0\par
One of the most important aspects of any Web site is the navigation menu. Over time, top level navigation has become fairly standardizes so our user will be looking for some key elements that help them find their way around our site:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 a small group of descriptive links in a rectangular arrangement, often horizontally\par
{\pntext\f1\'B7\tab}A hover style to give our user some amount of responsiveness\par
{\pntext\f1\'B7\tab}a special style indicating the link for the page we are currently on\par

\pard\sl240\slmult1\par
\b Menu 1\b0\par
This is a very basic menu design. It floats the list elements to the left and gives them each a simple hover property (underline) and a new background color for the link representing the page we are currently viewing.\par
\par
\b Menu 2\b0\par
This menu design uses a vertical arrangement but still floats the overall menu object so it can sit level with our content. We can also see a tabbed format here where the page we are currently viewing directly connects to the menu item representing it.\par
\par
\b Menu 3\b0\par
This third design employs hover a way to expose secondary links. This lets us have the top level clen and simple but gives the user the power of more specific options when they interact with our header.\par
\par
\ul\b Footers\ulnone\b0\line The footer of our page is typically the last thing our user will see, so it's important that we provide them any essential information. Typically, we will see footers that just contain contact info, but they often can also include navigation links, search bars or other calls to action.\par
\par
We will want our footer to flow with our overall page design, but to be distinct from our content.\par
\par
\b Footer 1\b0\par
This is a basic footer that uses background color to help it stand out from the rest of the content. It contains contact links and a subtle referene to the designer of the page.\par
\par
\b Footer 2\b0\par
This footer provides navigation links. Because the footer is at the bottom of the page, we can get away with more links being exposed because limiting area isn't as important as in the top level header.\par
\par
\b Footer 3\b0\par
This final design flows with the overall structure of the page, but limits the content to a single simple contact link.\par
\par
\ul\b\fs28 4.6 Project 4 - My resume\ulnone\b0\par
\ul\b\fs22 When to use what?\ulnone\b0\par
Now that we are at the end of Module 4, we have a long list of different ways to move HTML elements around our page using CSS. With so many tools come choices, as we can now accomplish the same task multiple ways. Here are some guidelines on how to decide when to use which tool, in the order in which we should use them when positioning an element.\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sl240\slmult1 Use padding and margin whenever we can. This will keep things simple in relation to the box model and the overall flow of elements in relation to one another\par
{\pntext\f0 2.\tab}The float property is necessary when we want two block elements to share horizontal space. It can be easy to overuse the float property, and we should keep in mind that if elements aren't floating the way we want them to we might want to adjust their order in the HTML instead of applying float to more and more elements\par
{\pntext\f0 3.\tab}If the above tools aren't getting our element where it should be, we can use relative positioning and directly set the box offsets. This makes things a bit more complicated especially when we try to inspect the box model around our element, but sometimes this is unavoidable because of collapsing margins\par
{\pntext\f0 4.\tab}If all that is not enough, there are advanced CSS features such as flexbox, table layout, absolute positioning and grid layout. These will be taught in an advanced CSS course.\par

\pard\sl240\slmult1\par
\ul\b Module 4 project - My resume\ulnone\b0\par
In Modules 2 and 3, we've been building on a Web page that displays personal information about us. For this module project, we are going to continue to build on that work and turn our profile into a "resume" or "CV". It's almost a requirement these days to have a professional online presence, so this is a good way to start building that online portfolio.\par
\par
Traditional printed resumes typically are required to fit on a single piece of paper (A4 or Letter sizes), which means they need to make effective use of the space available. For this project, we are going to try to reproduce a typical resume layout but with HTML and CSS.\par
\par
To more closely simulate a paper resume, our entire page's content must be centered in the middle 75% of the page. All our content should remain centered, and in the same posiiton relative to the other elements on the page when we resize the browser window.\par
\par
For this project we must at least:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 Use percentages to set the width of 3 elements\par
{\pntext\f1\'B7\tab}Change the text-alignment property to something other than "left" on at least 1 element\par
{\pntext\f1\'B7\tab}Have 4 floating elements\par
{\pntext\f1\'B7\tab}Use the clear proeprty once\par
{\pntext\f1\'B7\tab}Use the posiiton property and box offsets to position at least 2 elements\par

\pard\sl240\slmult1\par
\par
}
 