{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sl240\slmult1\ul\b\f0\fs28\lang9 3.2 Using HTML classes and IDs\ulnone\b0\par
\ul\b\fs22 Meet IDs and classes\ulnone\b0\par
Classes and IDs are "attribute selectors". This means that we can attach style to HTML elements based on that element's attributes. This empowers us to apply different style to items of the same HTML type.\par
\par
\b Classes\b0\par
Classes are an HTML attribute that specifies a name for a group of elements on the page. We can apply the class name to as many elements as we like, event if they are of different HTML tag types. We can use the class name with a period in front of the selector like so:\par
<p class="className">The intro paragraph</p>\par
Class names must be in single words, but we can include digits and dashes as long as the name begins with a letter. We should bear in mind that names are case sensitive.\par
\par
To apply a CSS rule to a class the name must be preceeded by a period like in the code below:\par
.className\{\par
\tab color: blue;\par
\}\par
\par
\b IDs\b0\par
An ID is an HTML attribute that specifies a name or unique identifier for a particular HTML element. They are like classes with a very important distinction: the value of the ID attribute must be unique throughout the document. This lets us target a single HTML element for styling. We use the name with a hashtag in front as the selector like so:\par
<p id="myFirstId">This is an extra special paragraph</p>\par
\par
ID names have the same rules as class names: start with a letter, can include numbers and dashes, no spaces. The way to create a selector for an ID is also similar to how we create a selector for a class, except we replace the period with a hash symbol like in the code below:\par
#myFirstId\{\par
\tab color: blue;\par
\}\par
\par
\ul\b\fs28 3.3 CSS pseudo-classes\par
\fs22 Meet CSS pseudo-classes\ulnone\b0\par
Pseudo-classea re a way to select HTML elements based on their state opposed to their HTML structure. We can read more about pseudo-classes here: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/TR/CSS22/selector.html#pseudo-elements }}{\fldrslt{https://www.w3.org/TR/CSS22/selector.html#pseudo-elements\ul0\cf0}}}}\f0\fs22\par
\par
Pseudo-classes must always be applied to an existing selector. Their "flag character" is the colon : as we can see used in the below examples. Here are some of the most popular pseudo-classes:\par
\par
\b :link and :visited\b0\par
a:visited\{\par
\tab color: grey;\par
\tab font-style: italic;\par
\}\par
\par
These pseudo-classes are the ones we are probably most familiar with. Even on this page we've noticed that links have different style than paragraph text. The <a> tag by default sets the text color to blue with an underline, but we have may also seen a purple link. This is the "visited" pseudo-class that applies a different style to links that the user has already clicked. The opposite of "link" which is a link a user has not yet clicked. These two states are mutually exclusive, meaning a lnik cannot be both at the same time.\par
\par
\b :hover\b0\par
li:hover\{\par
\tab background-color: yellow;\par
\}\par
\par
The hover pseudo-class is applied when the user points at an object but doesn't activate it, most commonly when they let their mouse cursor lay on top of an element without clicking. Some form factors don't support this, such as touch devices or pen surfaces. This is a really good way to encourage a user to click a link and we will often see it used on navigation bars.\par
\par
\b :focus\b0\par
input:focus\{\par
\tab background-color: blue;\par
\}\par
\par
The focus pseudo class is when a user has chosen to begin interacting with an element, often when they click into a form input such that the input is then ready to accept keyboard input.\par
\par
\b :active\b0\par
p:active\{\par
\tab color: red;\par
\}\par
\par
The active pseudo-class applies when an element is activated. This happens in the time between when the user clicks their mouse and they release it.\par
\par
\ul\b Activity 3.3 - Applying pseudo classes\ulnone\b0\par
In the course page there is a web page displayed, and, if we look at the CSS for this page we'll notice that there are multiple CSS rules with the same selectors. That is because some of these rules need to have pseudo classes applied.\par
\par
We should add pseudo classes to the rules so that:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 The title is underlined when the user hovers their mouse over the text\par
{\pntext\f1\'B7\tab}The input box gets a yellow border when the user hovers their mouse over the box\par
{\pntext\f1\'B7\tab}The input box has a yellow background when the user clicks inside the box\par
{\pntext\f1\'B7\tab}When the user hovers over the button it gets a background-color of #33cc99\par
{\pntext\f1\'B7\tab}The background color of the list elements turns white and the text turns #06666 (dark green) when the user hovers over them\par
{\pntext\f1\'B7\tab}When clicked, the list elements get a background color of #33cc99 (light green) while the text stays white\par
{\pntext\f1\'B7\tab}The links at the bottom of the page start out as white in color and then when they are clicked they turn #33cc99 (light green)\par

\pard\sl240\slmult1\par
\ul\b\fs28 3.4 Combining selectors\ulnone\b0\par
\ul\b\fs22 Meet contextual selectors\ulnone\b0\par
When we use two selectors separated by a space on a rule, we scope the rule to the elements that correspond to the selector on the right that are INSIDE the elements that correspond to the selector on the left. Let's say we have the following HTML:\par
<!DOCTYPE html>\par
<html lang="en">\par
\tab <head>\par
\tab\tab <meta charset="utf-8"/>\par
\tab </head>\par
\tab <body>\par
\tab\tab <img src="images/pic1.jpg" alt="pic 1"/>\par
\tab\tab <p>This is my paragraph full of usedul information\par
\tab\tab\tab <img src="images/pic2.jpg" alt="pic 2"/>\par
\tab\tab\tab Since there is text around these images they should be styled a little differently.\par
\tab\tab\tab <img src="images/pic3.jpg" alt="pic3"/>\par
\tab\tab </p>\par
\tab\tab <img src="images/pic4.jpg" alt="pic 4"/>\par
\tab </body>\par
</html>\par
If we applied the following CSS rule then the images INSIDE the paragraph would be set with a width of 100px, but that rule would not apply to the images outside the paragraph.\par
p img\{\par
\tab width: 100px;\par
\}\par
\par
As our web pages get more complex, contextual selectors become more important, because it won't scale to apply to classes and IDs to each individual item. Contextual selection becomes especially useful when we structure our HTML with section tags like header, section, article and footer.\par
\par
\ul\b Activity 3.4.1 - Contextual selectors\ulnone\b0\par
For prarctice we're going to learn how to better scope CSS with the crutch of classes and IDs. Looking at the following CSS:\par
body \{\par
    font-family: Tahoma, sans-serif;\par
\}\par
header, article, footer \{\par
    border: 10px #E9B000 solid;\par
    margin: 30px;\par
\}\par
h1 \{\par
    color: #E86E80;\par
\}\par
h1 \{\par
    background-color: #E86E80;\par
    color: #FFFFFF;\par
\}\par
p \{\par
    background-color: #008F95;\par
    color: #FFFFFF;\par
\}\par
p \{\par
    background-color: #FFFFFF;\par
    color: #008F95;\par
\}\par
 \par
ol \{\par
    background-color: #E24E43;\par
    color: #FFFFFF;\par
\}\par
ol \{\par
    background-color: #FFFFFF;\par
    color: #E24E43;\par
\}\par
ol \{\par
    border: 5px solid #E24E43;\par
\}\par
\par
As we can see there are CSS rules with duplicate selectors. We'll need to add some extra selectors to the existing CSS rules so that instead of duplicate rules, we have rules that address different instances of the HTML elements based on the structure of the HTML.\par
\par
\ul\b Cascading styles\ulnone\b0\par
Now that we've learned all these different selectors, we've probably noticed that there is nothing preventing one from creating rules that overlap, meaning creating rules that apply syle to the same HTML elements. In fact, it's very common for HTML elements on a page to have multiple CSS rules competing for importance.\par
\par
Thanks to the "cascading" part of "Cascading Style Sheets", this isn't a problem. That is because CSS has a way to figure out which rule "wins" when styles are conflicting. CSS actually computes a "weight" for each style and the on with the greatest weight wins. If we want all the specific on how this weight is computed, we can read more here: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/TR/CSS22/cascade.html }}{\fldrslt{https://www.w3.org/TR/CSS22/cascade.html\ul0\cf0}}}}\f0\fs22\par
For simplicity's sake, the most specific rule wins.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 A rule is generally more specific if it applies to a fewer number of elements than another rule that encompasses those elements. The more facets a rule has the more specific it is.\par
{\pntext\f1\'B7\tab}When pseudo-classes are applied this is more specific than without the pseudo-class. For example, p:hover will win over just p\par
{\pntext\f1\'B7\tab}Contextual selection is more specific because it scopes the rule to elements within a certain subset of those on the page. For example, a rule that applies to all the paragraphs within articles is more specific than a rule that applies to all the paragraphs on the page\par
{\pntext\f1\'B7\tab}IDs are most specific because we are directly applying them to the desired HTML element.The rule based on an ID will always win over other rules\par
{\pntext\f1\'B7\tab}If two rules have the exact same weight, the one that comes later in the CSS document is the one applied\par
{\pntext\f1\'B7\tab}We can use the "!important" modifier on a CSS property so that it will guarantee that style will be applied. This is a way for us to override the calculated weight\par

\pard\sl240\slmult1\par
The example displayed on the page shows that:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 the rule based on an ID isn't even overwritten by the pseudo class\par
{\pntext\f1\'B7\tab}when we hover over the sections within other sections, multiple hover rules apply!\par

\pard\sl240\slmult1\par
\ul\b Activity 3.4.2 - Cascading order\ulnone\b0\par
Cascading order can be difficult to manage.\par
For this activity, we cannot change any of the HTML (meaning we cannot add any IDs), but we'll need to change the CSS to make some of the rules more specific so that we achieve the final result displayed on the page.\par
\par
\ul\b\fs28 3.5 - Images\ulnone\b0\par
\ul\b\fs22 Images\ulnone\b0\par
Images are an extremely important part of our page, not only as part of our content but as a key way to help style our page. Before we even get to styling them we need to put considerable thought into what type of images to include in our page. One of the easiest ways to slow down our site's performance is to include lots of large, high-quality images. There are two general things to consider when picking our images: what format and how large are them?\par
\par
\b Formats\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 JPEG - possibly the most common image format used on the web, because it does a good job of compressing colourful, complex images into reasonably sized files. JPEG is often used for photos because, otherwise, photos can take a very long time to load\par
{\pntext\f1\'B7\tab}PNG - Provides a higher quality image, but we pay for it with a larger file size. PNG also has the ability to have transparent backgrounds, so we'll often see this used for graphics as part of the page's layout.\par
{\pntext\f1\'B7\tab}GIF - Supports moving images and transparent backgrounds. These can be especially large files so we should try to use them sparingly\par

\pard\sl240\slmult1\par
\b Sizing\b0\par
It's important to format and size our image before uploading it to our site, because while we can use CSS to resize it, the browser will download the full image even if we've chosen to display it smaller than it is.\par
We can resize images using the width or height properties of CSS like so:\par
\par
img\{\par
\tab width: 100px;\par
\tab height: 100px;\par
\}\par
\par
In module 4, we will discuss width and height in detail, but for the purpose of images, we only need to know that if we only set one of these properties the image will scale according to its original dimensions. If we set both width and height, CSS will stretch our image to fit whatever we specify.\par
\par
\b Spacing\b0\par
Rarely does it look nice when our content images touch our text content. We'll often want to give our images a good amount of white space surrounding them, and we can do this with padding and/or margin. In the examples below, we can see how we can even use padding and margin to achieve some interesting stylistic effects with our images.\par
\par
\b Border radius\b0\par
In module 2, we saw how we can use the "border-radius" property to make a button with rounded corners. We can do the same to images. We might even notice that it has become popular to turn square images into perfect circles, especially for icons or profile photos.\par
\par
\b Images as Design Elements\b0\par
When we see complicated styles as part of a Web page's design, chances are there are images as a foundational element. For example, we will often see images set as backgrounds or as a link. We need to remember that we can put an <img> tag within an anchor tag to turn it into a link. We can also use the background-image CSS property to set an image as a background instead of just using a solid color. We can read more about background images here: {{\field{\*\fldinst{HYPERLINK https://www.w3.org/wiki/CSS_background_images }}{\fldrslt{https://www.w3.org/wiki/CSS_background_images\ul0\cf0}}}}\f0\fs22\par
\par
\ul\b Text in images\ulnone\b0\par
It is best to overlay real text rather than use pixelated text. This makes it possible to search, copy and style the text, as well as making translation much easier. It also has accessibility benefits and makes translation much easier.\par
As we can see, there are a lot of things to consider, and if we do not plan out our images carefully they can end up looking very disruptive, like on the example in the page.\par
\par
\b Images 1\b0\par
The design shows some of the basics in properly incorporating images. It uses the colors from the image in the design of the overall page to help the image look as if it belongs. It also uses padding to give the image a "polaroid-style" border.\par
\par
\b Images 2\b0\par
This design is an example of an image gallery design. This gives all the images the same size and alignment while including plenty of white space to help the page not look too overwhelming despite having multiple photos.\par
\par
\b Images 3\b0\line This design demonstrates the use of an image both as a background and as a link. When using images as design elements it's best to use simple images to let our content still be easily consumable.\par
\par
\ul\b Forms\ulnone\b0\par
Forms can be a surprisingly tricky element to style because we are asking a lot of interaction from the user, and the burden is on us as the designer to make it clear what exactly we are asking them to do. However, with a few simple design changes we can make it much easier for the user to navigate our form. Here are some key design elements to keep in mind when designing forms.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1\b white space\b0  - It is important to separate our form elements from our other content, otherwise it can be easily skipped over. It is also important to use white space surrounding each of our input elements to help draw our user's eye from the start and the end of the form. White space can also give the impression of simplicity and ease, an overcrowded form can seem daunting and tiring to fill out.\par
{\pntext\f1\'B7\tab}\b borders\b0  - Possibly one of the most important design elements of our forms are borders. Borders give our user a visual clue that they should enter text, or select something from a drop down. When we eliminate all borders it is impossible to tell what is a form and what is just static text.\par
{\pntext\f1\'B7\tab}\b labels\b0  - Each input should have a label communicating to the user what information we are asking them to submit. We will want to make sure the text is aligned and flows with the input element so it is clear what label is associated with which input. One of the easiest ways to make sure there is to put the label inside the input text box as demonstrated in some of our sample designs\par
{\pntext\f1\'B7\tab}\b input sizes\b0  - We can help the user quickly assess how much text we are asking them to provide by how big our input element is. A very small input element will infer that we are only asking for a small number of characters, and a very large text box with multiple lines can infer that we are asking a lot more from our user. It is also important to try and gauge the input size accordingly so our user doesn't run out of space as they are entering text\par
{\pntext\f1\'B7\tab}\b pseudo-classes\b0  - Perhaps one of the best uses of pseudo-classes is with forms. Pseudo-classes can help provide extra feedback as our user interacts with each of our form elements. We'll often see hover used to expose more information, active used to help a user understand which element they are currently interacting with, and more.\par
{\pntext\f1\'B7\tab}\b submit button\b0  - We shouldn't some of the lessons learned in Module 2: it is important to make our button look like a button. We will want to make sure that our submit button is placed so that it is obvious after a user has entered in all the requested info.\par

\pard\sl240\slmult1\par
By stripping the elements of their styles we can see how important it is to add visual cues for our user.\par
\par
\b Form 1\b0\par
The first form design uses basic layout to give each input element a clear label, space and area for input followed by a clear submit buttom. This design also used pseudo classes to engage the user, which we can see in action in the Code Pen.\par
\par
\b Form 2\b0\par
This form design is more minimalist, using the clear and consistent design and layout to help the user feel like the form is extra short.\par
\par
\b Form 3\b0\par
This form design leaves a lot of white space to help it feel clean and simple.\par
\par
\ul\b Module 3 project - My profile\ulnone\b0\par
Now that we have a host of new selectors available, we can style much more complicated HTML. If we take our about me page from Module 2, and add to it so that it becomes more of a "profile". Our page must have the following elements:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 header and footer tags\par
{\pntext\f1\'B7\tab}an education, work experience and favourite things sections\par
{\pntext\f1\'B7\tab}at least two subsections within each main section. We could use either the <section> tag, the <article> tag or the <div> tag for this\par
{\pntext\f1\'B7\tab}Each subsection should have its own title and two inner subsections\par

\pard\sl240\slmult1\par
Once we have all these elements, we should style them to look nice, but we must have each of the following:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sl240\slmult1 1 ID\par
{\pntext\f1\'B7\tab}2 different classes, each with at least 2 members\par
{\pntext\f1\'B7\tab}1 special style applied when an element is hovered by the user's cursor\par
{\pntext\f1\'B7\tab}1 special style applied when the user clicks an element\par
{\pntext\f1\'B7\tab}3 uses of contextual selectors\par

\pard\sl240\slmult1\par
}
 